Index: LAB2/main.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0,\r\n \"metadata\": {\r\n  \"colab\": {\r\n   \"provenance\": []\r\n  },\r\n  \"kernelspec\": {\r\n   \"name\": \"python3\",\r\n   \"language\": \"python\",\r\n   \"display_name\": \"Python 3 (ipykernel)\"\r\n  },\r\n  \"language_info\": {\r\n   \"name\": \"python\"\r\n  }\r\n },\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Warning:\\n\",\r\n    \"\\n\",\r\n    \"After each exercise from now on, do a git commit and write in a message what you did.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"vWgiVDOhNaoM\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"3.\\n\",\r\n    \"Write a Python program that takes input from the user to create a list of integers and then performs the following operations:\\n\",\r\n    \"\\n\",\r\n    \"  a. Input: Ask the user to enter a series of space-separated integers.\\n\",\r\n    \"\\n\",\r\n    \"  b. Convert Input: Convert the input string into a list of integers.\\n\",\r\n    \"  \\n\",\r\n    \"  c. Sorting: Sort the list in ascending order.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Sorted list: [1, 2, 5, 8, 9]\\n\",\r\n    \"  ```\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"PspxMdWBgq0E\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input:\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"\\n\",\r\n    \"# Sorting:\\n\",\r\n    \"numbers_list = sorted(numbers_list)\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Sorted list:\\\", numbers_list)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"AI_-8VGKh7rA\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-11T12:09:05.698808100Z\",\r\n     \"start_time\": \"2024-03-11T12:09:01.272332100Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 6,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Sorted list: [1, 2, 5, 8, 9]\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"-----------------------------------------------------------------------------\\n\",\r\n    \"\\n\",\r\n    \"Difference between Lists and Tuples:\\n\",\r\n    \"\\n\",\r\n    \"Lists are mutable, meaning their elements can be changed after creation, while tuples are immutable, meaning their elements cannot be changed after creation.\\n\",\r\n    \"Lists are represented by square brackets [ ], whereas tuples are represented by parentheses ( ).\\n\",\r\n    \"Lists have methods like append(), insert(), and remove() to modify the list, while tuples do not support such methods due to their immutability.\\n\",\r\n    \"Lists are typically used when the elements need to be modified or updated frequently, while tuples are used when the data is meant to be constant or unchangeable.\\n\",\r\n    \"\\n\",\r\n    \"-----------------------------------------------------------------------------\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"i3SZ_u9yl9aa\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"4.\\n\",\r\n    \"Extend the previous Python program to include tuples. Now, in addition to creating a list of integers from user input, the program should also create a tuple of those integers and perform the following operations:\\n\",\r\n    \"\\n\",\r\n    \"  a. Input: Ask the user to enter a series of space-separated integers.\\n\",\r\n    \"\\n\",\r\n    \"  b. Convert Input: Convert the input string into a list of integers and a tuple of integers.\\n\",\r\n    \"\\n\",\r\n    \"  c. Sorting: Sort both the list and the tuple in ascending order.\\n\",\r\n    \"\\n\",\r\n    \"  d. Print Output: Print the sorted list and tuple.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"  \\n\",\r\n    \"  Sorted list: [1, 2, 5, 8, 9]\\n\",\r\n    \"  Sorted tuple: (1, 2, 5, 8, 9)\\n\",\r\n    \"  ```\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"s3dGdHFnmHGE\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input:\\n\",\r\n    \"unsorted_numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"unsorted_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Sorting:\\n\",\r\n    \"numbers_list = sorted(unsorted_numbers_list)\\n\",\r\n    \"sorted_tuple = tuple(sorted(unsorted_numbers_list)) # I cannot sort tuples, so I sorted a numbers_list in that case.\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Sorted list:\\\", numbers_list)\\n\",\r\n    \"print(\\\"Sorted tuple:\\\", sorted_tuple)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"5hm5uHjjl-wZ\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-11T12:21:43.827912600Z\",\r\n     \"start_time\": \"2024-03-11T12:21:37.939205800Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 10,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"<class 'tuple'>\\n\",\r\n      \"Sorted list: [1, 2, 5, 8, 9]\\n\",\r\n      \"Sorted tuple: (1, 2, 5, 8, 9)\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \" 5.\\n\",\r\n    \"Extend the previous Python program to demonstrate the manipulation of lists using the append(), insert(), and remove() functions, and to emphasize the immutability of tuples.\\n\",\r\n    \"\\n\",\r\n    \"  a. Input: Ask the user to enter a series of space-separated integers.\\n\",\r\n    \"\\n\",\r\n    \"  b. Convert Input: Convert the input string into a list of integers and a tuple of integers.\\n\",\r\n    \"  \\n\",\r\n    \"  c. Manipulate List: Use the append(), insert(), and remove() functions to modify the list.\\n\",\r\n    \"  \\n\",\r\n    \"  d. Attempt to Modify Tuple: Try to modify the tuple using the same operations as the list.\\n\",\r\n    \"  \\n\",\r\n    \"  e. Print Output: Print the modified list and attempt to print the modified tuple.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Tuples are immutable and cannot be modified.\\n\",\r\n    \"  Modified list: [5, 2, 20, 1, 9, 10]\\n\",\r\n    \"  Tuple remains unchanged: (5, 2, 8, 1, 9)\\n\",\r\n    \"  ```\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"ys8cK-cdqIk7\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"try:\\n\",\r\n    \"    #   Insert 20 at index 2\\n\",\r\n    \"    numbers_tuple.insert(2, 20)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    pass  # Insert operation will also raise an error\\n\",\r\n    \"try:\\n\",\r\n    \"    #   Remove one element  from the tuple\\n\",\r\n    \"    numbers_tuple.remove(1)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    pass  # Remove operation will also raise an error\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Modified list:\\\", numbers_list)\\n\",\r\n    \"print(\\\"Tuple remains unchanged:\\\", numbers_tuple)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"u8ATNzGWqT0H\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-11T12:36:25.080482200Z\",\r\n     \"start_time\": \"2024-03-11T12:36:17.906458400Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 16,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Modified list: [23, 20, 63, 2, 6, 10]\\n\",\r\n      \"Tuple remains unchanged: (1, 23, 63, 2, 6)\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"--------------------------------------------------------------------------------\\n\",\r\n    \"1. **Set**:\\n\",\r\n    \"A set in Python is a collection of unique elements that are unordered. This means that you cannot access elements by indices, and the elements are stored in an unordered manner. The main feature of a set is that each element in the set must be unique. Sets are useful when you want to perform set operations, such as mathematical set operations (e.g., union, difference, intersection).\\n\",\r\n    \"\\n\",\r\n    \"Example of creating a set:\\n\",\r\n    \"```python\\n\",\r\n    \"set = {1, 2, 3, 4, 5}  # Creating a set\\n\",\r\n    \"print(set)  # Displaying the set\\n\",\r\n    \"```\\n\",\r\n    \"\\n\",\r\n    \"2. **Dictionary**:\\n\",\r\n    \"A dictionary in Python is a collection of key-value pairs, where each key is unique. Dictionaries are unique in the sense that they allow us to associate specific values with specific keys, making it easy to retrieve values by referring to their corresponding keys. Dictionaries are very useful when you want to store data in the form of key-value pairs, such as dictionary definitions, test scores, survey results, etc.\\n\",\r\n    \"\\n\",\r\n    \"Example of creating a dictionary:\\n\",\r\n    \"```python\\n\",\r\n    \"dictionary = {\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\", \\\"key3\\\": \\\"value3\\\"}  # Creating a dictionary\\n\",\r\n    \"print(dictionary)  # Displaying the dictionary\\n\",\r\n    \"```\\n\",\r\n    \"It's important to remember that both in sets and dictionaries, keys (in the case of dictionaries) and elements (in the case of sets) must be hashable, meaning they must be immutable (e.g., numbers, strings, tuples), and they must have a defined hashing method.\\n\",\r\n    \"\\n\",\r\n    \"--------------------------------------------------------------------------------\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"IMGqb8VoxwOv\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"6.\\n\",\r\n    \"Additionally, introduce sets and dictionaries and perform basic operations on them.\\n\",\r\n    \"\\n\",\r\n    \"  a. ...\\n\",\r\n    \"\\n\",\r\n    \"  b. ...\\n\",\r\n    \"\\n\",\r\n    \"  c. ...\\n\",\r\n    \"\\n\",\r\n    \"  d. ...\\n\",\r\n    \"\\n\",\r\n    \"  e. Set Operations: Perform union, intersection, and difference operations on the set.\\n\",\r\n    \"\\n\",\r\n    \"  f. Dictionary Operations: Print the dictionary, add a new key-value pair, and delete an existing key-value pair.\\n\",\r\n    \"\\n\",\r\n    \"  g. Print Output: Print the modified list, unchanged tuple, set operations results, and updated dictionary.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Tuples are immutable and cannot be modified.\\n\",\r\n    \"  Original Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n    \"  Modified list: [5, 2, 20, 1, 9, 10]\\n\",\r\n    \"  Tuple remains unchanged: (5, 2, 8, 1, 9)\\n\",\r\n    \"  Union of set: {1, 2, 5, 9, 10, 11, 12}\\n\",\r\n    \"  Intersection of set: {8, 5}\\n\",\r\n    \"  Difference of set: {9}\\n\",\r\n    \"  Updated Dictionary: {5: 25, 2: 4, 1: 1, 9: 81, 11: 121}\\n\",\r\n    \"\\n\",\r\n    \"  ```\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"PD4Fhykxx1w6\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Set Operations\\n\",\r\n    \"set_num = {1, 2, 4, 20}\\n\",\r\n    \"# Union\\n\",\r\n    \"set_union = set_num.union({1, 4, 19, 20})\\n\",\r\n    \"# Intersection\\n\",\r\n    \"set_intersection = set_num.intersection({1, 4, 19, 20})\\n\",\r\n    \"# Difference\\n\",\r\n    \"set_difference = set_num - set_intersection\\n\",\r\n    \"\\n\",\r\n    \"# Dictionary Operations\\n\",\r\n    \"numbers_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"print(\\\"Original Dictionary:\\\", numbers_dict)\\n\",\r\n    \"# Add a new key-value pair\\n\",\r\n    \"numbers_dict[11] = 121\\n\",\r\n    \"# Delete an existing key-value pair\\n\",\r\n    \"numbers_dict.pop(8)\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Modified list:\\\", numbers_list)\\n\",\r\n    \"print(\\\"Tuple remains unchanged:\\\", numbers_tuple)\\n\",\r\n    \"print(\\\"Union of set:\\\", set_union)\\n\",\r\n    \"print(\\\"Intersection of set:\\\", set_intersection)\\n\",\r\n    \"print(\\\"Difference of set:\\\", set_difference)\\n\",\r\n    \"print(\\\"Updated Dictionary:\\\", numbers_dict)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"AwRmtngJzAZI\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-14T23:28:02.528022Z\",\r\n     \"start_time\": \"2024-03-14T23:27:58.838192Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Modified list: [5, 2, 20, 8, 9, 10]\\n\",\r\n      \"Tuple remains unchanged: (5, 2, 1, 8, 9)\\n\",\r\n      \"Union of set: {1, 2, 4, 19, 20}\\n\",\r\n      \"Intersection of set: {1, 4, 20}\\n\",\r\n      \"Difference of set: {2}\\n\",\r\n      \"Updated Dictionary: {5: 25, 2: 4, 20: 400, 9: 81, 10: 100, 11: 121}\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"7. **Built-in Types and Type Conversion**\\n\",\r\n    \"\\n\",\r\n    \"  Extend the previous Python program to demonstrate the use of built-in types and type conversion. Perform the following operations:\\n\",\r\n    \"\\n\",\r\n    \"  a. ...\\n\",\r\n    \"\\n\",\r\n    \"  b. ...\\n\",\r\n    \"\\n\",\r\n    \"  c. ...\\n\",\r\n    \"\\n\",\r\n    \"  d. ...\\n\",\r\n    \"\\n\",\r\n    \"  e. ...\\n\",\r\n    \"\\n\",\r\n    \"  f. ...\\n\",\r\n    \"\\n\",\r\n    \"  g. Type Conversion: Convert the list to a tuple, set, and dictionary. Convert the tuple to a list, set, and dictionary. Convert the set to a list, tuple, and dictionary. Convert the dictionary to a list, tuple, and set.\\n\",\r\n    \"\\n\",\r\n    \"  h. Print Output: Print the results of the type conversion operations.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Tuples are immutable and cannot be modified.\\n\",\r\n    \"  Original Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n    \"  List to Tuple: (5, 2, 20, 1, 9, 10)\\n\",\r\n    \"  List to Set: {1, 2, 5, 9, 10, 20}\\n\",\r\n    \"  List to Dictionary: {5: 25, 2: 4, 20: 400, 1: 1, 9: 81, 10: 100}\\n\",\r\n    \"  Tuple to List: [5, 2, 8, 1, 9]\\n\",\r\n    \"  Tuple to Set: {1, 2, 5, 8, 9}\\n\",\r\n    \"  Tuple to Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n    \"  Set to List: [1, 2, 5, 9, 10, 20]\\n\",\r\n    \"  Set to Tuple: (1, 2, 5, 9, 10, 20)\\n\",\r\n    \"  Set to Dictionary: {1: 1, 2: 4, 5: 25, 9: 81, 10: 100, 20: 400}\\n\",\r\n    \"  Dictionary to List: [5, 2, 20, 1, 9, 10, 11]\\n\",\r\n    \"  Dictionary to Tuple: (5, 2, 20, 1, 9, 10, 11)\\n\",\r\n    \"  Dictionary to Set: {1, 2, 5, 9, 10, 11, 20}\\n\",\r\n    \"```\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"N0xlv8oD2aXa\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Set Operations\\n\",\r\n    \"set_num = {1, 2, 4, 20}\\n\",\r\n    \"# Union\\n\",\r\n    \"set_union = set_num.union({1, 4, 19, 20})\\n\",\r\n    \"# Intersection\\n\",\r\n    \"set_intersection = set_num.intersection({1, 4, 19, 20})\\n\",\r\n    \"# Difference\\n\",\r\n    \"set_difference = set_num - set_intersection\\n\",\r\n    \"\\n\",\r\n    \"# Dictionary Operations\\n\",\r\n    \"numbers_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"print(\\\"Original Dictionary:\\\", numbers_dict)\\n\",\r\n    \"# Add a new key-value pair\\n\",\r\n    \"numbers_dict[11] = 121\\n\",\r\n    \"# Delete an existing key-value pair\\n\",\r\n    \"numbers_dict.pop(8)\\n\",\r\n    \"\\n\",\r\n    \"# Type Conversion\\n\",\r\n    \"# list_to_tuple =\\n\",\r\n    \"list_to_tuple = tuple(numbers_list)\\n\",\r\n    \"# list_to_set =\\n\",\r\n    \"list_to_set = {x for x in numbers_list}\\n\",\r\n    \"# list_to_dict =\\n\",\r\n    \"list_to_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"# tuple_to_list =\\n\",\r\n    \"tuple_to_list = list(numbers_tuple)\\n\",\r\n    \"# tuple_to_set =\\n\",\r\n    \"tuple_to_set = {x for x in numbers_tuple}\\n\",\r\n    \"# tuple_to_dict =\\n\",\r\n    \"tuple_to_dict = {number: number ** 2 for number in numbers_tuple}\\n\",\r\n    \"# set_to_list =\\n\",\r\n    \"set_to_list = list(set_num)\\n\",\r\n    \"# set_to_tuple =\\n\",\r\n    \"set_to_tuple = tuple(set_num)\\n\",\r\n    \"# set_to_dict =\\n\",\r\n    \"set_to_dict = {number: number ** 2 for number in set_num}\\n\",\r\n    \"# dict_to_list =\\n\",\r\n    \"dict_to_list = list(numbers_dict)\\n\",\r\n    \"# dict_to_tuple =\\n\",\r\n    \"dict_to_tuple = tuple(numbers_tuple)\\n\",\r\n    \"# dict_to_set =\\n\",\r\n    \"dict_to_set = {x for x in numbers_dict}\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"List to Tuple:\\\", list_to_tuple)\\n\",\r\n    \"print(\\\"List to Set:\\\", list_to_set)\\n\",\r\n    \"print(\\\"List to Dictionary:\\\", list_to_dict)\\n\",\r\n    \"print(\\\"Tuple to List:\\\", tuple_to_list)\\n\",\r\n    \"print(\\\"Tuple to Set:\\\", tuple_to_set)\\n\",\r\n    \"print(\\\"Tuple to Dictionary:\\\", tuple_to_dict)\\n\",\r\n    \"print(\\\"Set to List:\\\", set_to_list)\\n\",\r\n    \"print(\\\"Set to Tuple:\\\", set_to_tuple)\\n\",\r\n    \"print(\\\"Set to Dictionary:\\\", set_to_dict)\\n\",\r\n    \"print(\\\"Dictionary to List:\\\", dict_to_list)\\n\",\r\n    \"print(\\\"Dictionary to Tuple:\\\", dict_to_tuple)\\n\",\r\n    \"print(\\\"Dictionary to Set:\\\", dict_to_set)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"-NzD4x_n31Rv\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-14T23:51:21.268005Z\",\r\n     \"start_time\": \"2024-03-14T23:51:18.032861Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 16,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"List to Tuple: (5, 2, 20, 8, 9, 10)\\n\",\r\n      \"List to Set: {2, 5, 8, 9, 10, 20}\\n\",\r\n      \"List to Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Tuple to List: [5, 2, 8, 1, 9]\\n\",\r\n      \"Tuple to Set: {1, 2, 5, 8, 9}\\n\",\r\n      \"Tuple to Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n      \"Set to List: [1, 2, 4, 20]\\n\",\r\n      \"Set to Tuple: (1, 2, 4, 20)\\n\",\r\n      \"Set to Dictionary: {1: 1, 2: 4, 4: 16, 20: 400}\\n\",\r\n      \"Dictionary to List: [5, 2, 20, 9, 10, 11]\\n\",\r\n      \"Dictionary to Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Dictionary to Set: {2, 5, 9, 10, 11, 20}\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"8.\\n\",\r\n    \"Extend the previous Python program to write the output to a file and perform operations on that file.\\n\",\r\n    \"\\n\",\r\n    \"  a. ...\\n\",\r\n    \"\\n\",\r\n    \"  b. ...\\n\",\r\n    \"\\n\",\r\n    \"  c. ...\\n\",\r\n    \"\\n\",\r\n    \"  d. ...\\n\",\r\n    \"\\n\",\r\n    \"  e. ...\\n\",\r\n    \"\\n\",\r\n    \"  f. ...\\n\",\r\n    \"\\n\",\r\n    \"  g. ...\\n\",\r\n    \"\\n\",\r\n    \"  h. Write Output to File: Write all the results (original inputs, modified data structures, type conversion results) to a file.\\n\",\r\n    \"\\n\",\r\n    \"  i. Perform Operations on File: Open the file, read its content, and perform some operations like counting the number of lines, finding specific data, etc.\\n\",\r\n    \"\\n\",\r\n    \"  j. Modify File Content: Modify the content of the file by, for example, changing specific lines or adding new lines.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"KVn_MxPh6gNz\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Set Operations\\n\",\r\n    \"numbers_set = {1, 2, 4, 20}\\n\",\r\n    \"# Union\\n\",\r\n    \"set_union = numbers_set.union({1, 4, 19, 20})\\n\",\r\n    \"# Intersection\\n\",\r\n    \"set_intersection = numbers_set.intersection({1, 4, 19, 20})\\n\",\r\n    \"# Difference\\n\",\r\n    \"set_difference = numbers_set - set_intersection\\n\",\r\n    \"\\n\",\r\n    \"# Dictionary Operations\\n\",\r\n    \"numbers_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"print(\\\"Original Dictionary:\\\", numbers_dict)\\n\",\r\n    \"# Add a new key-value pair\\n\",\r\n    \"numbers_dict[11] = 121\\n\",\r\n    \"# Delete an existing key-value pair\\n\",\r\n    \"numbers_dict.pop(8)\\n\",\r\n    \"\\n\",\r\n    \"# Type Conversion\\n\",\r\n    \"# list_to_tuple =\\n\",\r\n    \"list_to_tuple = tuple(numbers_list)\\n\",\r\n    \"# list_to_set =\\n\",\r\n    \"list_to_set = {x for x in numbers_list}\\n\",\r\n    \"# list_to_dict =\\n\",\r\n    \"list_to_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"# tuple_to_list =\\n\",\r\n    \"tuple_to_list = list(numbers_tuple)\\n\",\r\n    \"# tuple_to_set =\\n\",\r\n    \"tuple_to_set = {x for x in numbers_tuple}\\n\",\r\n    \"# tuple_to_dict =\\n\",\r\n    \"tuple_to_dict = {number: number ** 2 for number in numbers_tuple}\\n\",\r\n    \"# set_to_list =\\n\",\r\n    \"set_to_list = list(numbers_set)\\n\",\r\n    \"# set_to_tuple =\\n\",\r\n    \"set_to_tuple = tuple(numbers_set)\\n\",\r\n    \"# set_to_dict =\\n\",\r\n    \"set_to_dict = {number: number ** 2 for number in numbers_set}\\n\",\r\n    \"# dict_to_list =\\n\",\r\n    \"dict_to_list = list(numbers_dict)\\n\",\r\n    \"# dict_to_tuple =\\n\",\r\n    \"dict_to_tuple = tuple(numbers_tuple)\\n\",\r\n    \"# dict_to_set =\\n\",\r\n    \"dict_to_set = {x for x in numbers_dict}\\n\",\r\n    \"\\n\",\r\n    \"student_number = input(\\\"Enter your student number: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Write Output to File like this:\\n\",\r\n    \"output_file = open(\\\"output.txt\\\", \\\"w\\\")\\n\",\r\n    \"data = [\\\"Student Number: \\\" + student_number,\\n\",\r\n    \"     \\n\",\r\n    \"    \\\"\\\\n\\\\nOriginal List: \\\" + str(numbers_list),\\n\",\r\n    \"    \\\"\\\\nOriginal Tuple: \\\" + str(numbers_tuple),\\n\",\r\n    \"    \\\"\\\\nOriginal Set: \\\" + str(numbers_set),\\n\",\r\n    \"    \\\"\\\\nOriginal Dictionary: \\\" + str(numbers_dict),\\n\",\r\n    \"\\n\",\r\n    \"    \\\"\\\\n\\\\nManipulated List: \\\" + str(numbers_list),\\n\",\r\n    \"    \\\"\\\\nManipulated Tuple: \\\" + str(numbers_tuple),\\n\",\r\n    \"    \\\"\\\\nUnion of Set: \\\" + str(set_union),\\n\",\r\n    \"    \\\"\\\\nIntersection of Set: \\\" + str(set_intersection),\\n\",\r\n    \"    \\\"\\\\nDifference of Set: \\\" + str(set_difference),\\n\",\r\n    \"    \\\"\\\\nUpdated Dictionary: \\\" + str(numbers_dict),\\n\",\r\n    \"\\n\",\r\n    \"    \\\"\\\\n\\\\nList to Tuple: \\\" + str(list_to_tuple),\\n\",\r\n    \"    \\\"\\\\nList to Set: \\\" + str(list_to_set),\\n\",\r\n    \"    \\\"\\\\nList to Dictionary: \\\" + str(list_to_dict),\\n\",\r\n    \"    \\\"\\\\nTuple to List: \\\" + str(tuple_to_list),\\n\",\r\n    \"    \\\"\\\\nTuple to Set: \\\" + str(tuple_to_set),\\n\",\r\n    \"    \\\"\\\\nTuple to Dictionary: \\\" + str(tuple_to_dict),\\n\",\r\n    \"    \\\"\\\\nSet to List: \\\" + str(set_to_list),\\n\",\r\n    \"    \\\"\\\\nSet to Tuple: \\\" + str(set_to_tuple),\\n\",\r\n    \"    \\\"\\\\nSet to Dictionary: \\\" + str(set_to_dict),\\n\",\r\n    \"    \\\"\\\\nDictionary to List: \\\" + str(dict_to_list),\\n\",\r\n    \"    \\\"\\\\nDictionary to Tuple: \\\" + str(dict_to_tuple),\\n\",\r\n    \"    \\\"\\\\nDictionary to Set: \\\" + str(dict_to_set)]\\n\",\r\n    \"\\n\",\r\n    \"output_file.writelines(data)\\n\",\r\n    \"output_file.close()\\n\",\r\n    \"\\n\",\r\n    \"# print \\\"Content of the file:\\\"\\n\",\r\n    \"output_file = open(\\\"output.txt\\\", \\\"r\\\")\\n\",\r\n    \"print(output_file.read())\\n\",\r\n    \"\\n\",\r\n    \"# Perform Operations on File:\\n\",\r\n    \"#   Count the number of lines in the file\\n\",\r\n    \"#Count the number of lines in python\\n\",\r\n    \"with open(\\\"output.txt\\\",\\\"r\\\") as file:\\n\",\r\n    \"   count = 0\\n\",\r\n    \"   for line in file: \\n\",\r\n    \"      count += 1\\n\",\r\n    \"print(\\\"The number of lines in my output.txt file is: \\\", count)\\n\",\r\n    \"\\n\",\r\n    \"#   Count the number of integers in the file\\n\",\r\n    \"count_numbers = 0\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    for line in file:\\n\",\r\n    \"        for char in line:\\n\",\r\n    \"            if char.isdigit(): count_numbers += 1\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"The number of integers in my output.txt file is:\\\", count_numbers)\\n\",\r\n    \"#   Add all integers in the file (sum).\\n\",\r\n    \"total_sum = 0\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    for line in file:\\n\",\r\n    \"        for char in line:\\n\",\r\n    \"            if char.isdigit():\\n\",\r\n    \"                total_sum += int(char)\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"The sum of all integers in my output.txt file is:\\\", total_sum)\\n\",\r\n    \"#   Modify the content of the file\\n\",\r\n    \"new_line = \\\"This is the new first line in my output.txt file! \\\\n\\\"\\n\",\r\n    \"\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    file_content = file.read()\\n\",\r\n    \"updated_content = new_line + file_content\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"w\\\") as file:\\n\",\r\n    \"    file.write(updated_content)\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"d54la3il7LNS\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-15T00:50:15.912970Z\",\r\n     \"start_time\": \"2024-03-15T00:50:03.952338Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 25,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Student Number: s26904\\n\",\r\n      \"\\n\",\r\n      \"Original List: [5, 2, 20, 8, 9, 10]\\n\",\r\n      \"Original Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Original Set: {1, 2, 4, 20}\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 9: 81, 10: 100, 11: 121}\\n\",\r\n      \"\\n\",\r\n      \"Manipulated List: [5, 2, 20, 8, 9, 10]\\n\",\r\n      \"Manipulated Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Union of Set: {1, 2, 4, 19, 20}\\n\",\r\n      \"Intersection of Set: {1, 4, 20}\\n\",\r\n      \"Difference of Set: {2}\\n\",\r\n      \"Updated Dictionary: {5: 25, 2: 4, 20: 400, 9: 81, 10: 100, 11: 121}\\n\",\r\n      \"\\n\",\r\n      \"List to Tuple: (5, 2, 20, 8, 9, 10)\\n\",\r\n      \"List to Set: {2, 5, 8, 9, 10, 20}\\n\",\r\n      \"List to Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Tuple to List: [5, 2, 8, 1, 9]\\n\",\r\n      \"Tuple to Set: {1, 2, 5, 8, 9}\\n\",\r\n      \"Tuple to Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n      \"Set to List: [1, 2, 4, 20]\\n\",\r\n      \"Set to Tuple: (1, 2, 4, 20)\\n\",\r\n      \"Set to Dictionary: {1: 1, 2: 4, 4: 16, 20: 400}\\n\",\r\n      \"Dictionary to List: [5, 2, 20, 9, 10, 11]\\n\",\r\n      \"Dictionary to Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Dictionary to Set: {2, 5, 9, 10, 11, 20}\\n\",\r\n      \"The number of lines in my output.txt file is:  26\\n\",\r\n      \"The number of integers in my output.txt file is: 199\\n\",\r\n      \"The sum of all integers in my output.txt file is: 594\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"--------------------------------------------------------------------------------\\n\",\r\n    \"**Control Statements:**\\n\",\r\n    \"Control statements are used in programming to alter the flow of execution based on certain conditions or criteria. In Python, commonly used control statements include:\\n\",\r\n    \"\\n\",\r\n    \"`if, elif, else:` These statements are used for conditional execution. They allow the program to execute different blocks of code based on specified conditions.\\n\",\r\n    \"\\n\",\r\n    \"`for loop:` Used for iterating over a sequence (such as lists, tuples, strings, etc.) or any iterable object. It allows you to execute a block of code repeatedly for each item in the sequence.\\n\",\r\n    \"\\n\",\r\n    \"`while loop:` Used for executing a block of code repeatedly as long as a specified condition is true. It keeps iterating until the condition becomes false.\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"**Loops:**\\n\",\r\n    \"Loops are used for executing a block of code repeatedly. In Python, there are two main types of loops:\\n\",\r\n    \"\\n\",\r\n    \"`for loop: `As mentioned earlier, the for loop iterates over a sequence or any iterable object.\\n\",\r\n    \"\\n\",\r\n    \"`while loop:` This loop executes a block of code as long as a specified condition is true. It continues iterating until the condition becomes false.\\n\",\r\n    \"\\n\",\r\n    \"**Other Statements:**\\n\",\r\n    \"This category typically includes other types of statements that don't fall directly under control statements or loops. It can include various types of statements used for different purposes in Python programming, such as:\\n\",\r\n    \"\\n\",\r\n    \"`Assignment statements:` Assigning values to variables.\\n\",\r\n    \"\\n\",\r\n    \"`Function calls:` Invoking functions to perform specific tasks.\\n\",\r\n    \"\\n\",\r\n    \"`Import statements:` Importing modules or packages to use their functionality in the current script or program.\\n\",\r\n    \"\\n\",\r\n    \"`Exception handling statements: `Statements used for handling exceptions (errors) that may occur during the execution of a program, such as try, except, finally, etc.\\n\",\r\n    \"\\n\",\r\n    \"`With statements: `Used for resource management, especially for working with files, to ensure that certain resources are properly closed or released after use.\\n\",\r\n    \"\\n\",\r\n    \"These are fundamental constructs in Python programming that enable you to control the flow of your program, repeat tasks efficiently, and execute various types of statements to achieve desired functionality.\\n\",\r\n    \"\\n\",\r\n    \"-------------------------------------------------------------------------------\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"kDx3mxAgD2L7\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"9.  Utilizing the Largest Integer from output.txt\\n\",\r\n    \"\\n\",\r\n    \"  Task Description:\\n\",\r\n    \"\\n\",\r\n    \"  Transform the previous task to utilize the largest integer from the output file 'output.txt' instead of asking the user for it.\\n\",\r\n    \"\\n\",\r\n    \"  1. Read the largest integer from the 'output.txt' file.\\n\",\r\n    \"  2. Generate a list of all prime numbers up to the largest integer.\\n\",\r\n    \"  3. Print the list of prime numbers.\\n\",\r\n    \"  4. Calculate the sum of all prime numbers in the list.\\n\",\r\n    \"  5. Determine the largest and smallest prime numbers in the list.\\n\",\r\n    \"  6. Check if the largest integer itself is prime and print the result.\\n\",\r\n    \"  7. Write the list of prime numbers along with the sum, largest, and smallest prime numbers to a file 'prime_numbers.txt'.\\n\",\r\n    \"  8. Handle the scenario where the largest integer cannot be found in the file.\\n\",\r\n    \"\\n\",\r\n    \"  Example:\\n\",\r\n    \"\\n\",\r\n    \"  If the 'output.txt' file contains:\\n\",\r\n    \"  Largest prime number: 20\\n\",\r\n    \"\\n\",\r\n    \"  The program will generate the list of prime numbers up to 20, perform calculations, and write the results to 'prime_numbers.txt'.\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"pWC3IYevHysh\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"my_set = {}\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    for line in file:\\n\",\r\n    \"        for char in line:\\n\",\r\n    \"            if char.isdigit():\\n\",\r\n    \"                my_set += int(char)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"The sum of all integers in my output.txt file is:\\\", total_sum)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"-Lz65OTiM7ds\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"10.\\n\",\r\n    \"In the final main.ipynb file, leave the results from task 8 and 9, commit and push\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"V5bxEjZFNCAA\"\r\n   }\r\n  }\r\n ]\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LAB2/main.ipynb b/LAB2/main.ipynb
--- a/LAB2/main.ipynb	
+++ b/LAB2/main.ipynb	
@@ -701,22 +701,48 @@
     "      count += 1\n",
     "print(\"The number of lines in my output.txt file is: \", count)\n",
     "\n",
-    "#   Count the number of integers in the file\n",
+    "# Count the number of integers in the file\n",
     "count_numbers = 0\n",
+    "line_count = 0\n",
     "with open(\"output.txt\", \"r\") as file:\n",
     "    for line in file:\n",
-    "        for char in line:\n",
-    "            if char.isdigit(): count_numbers += 1\n",
+    "        line_count += 1  # Increment line count for each line\n",
+    "        \n",
+    "        # Skip the first two lines\n",
+    "        if line_count <= 2:\n",
+    "            continue\n",
+    "        \n",
+    "        # Split the line into tokens using non-digit characters as separators\n",
+    "        tokens = ''.join(char if char.isdigit() else ' ' for char in line).split()\n",
+    "        # Iterate over tokens and attempt to convert them to integers\n",
+    "        for token in tokens:\n",
+    "            try:\n",
+    "                int(token)  # Attempt to convert the token to an integer\n",
+    "                count_numbers += 1\n",
+    "            except ValueError:\n",
+    "                pass  # Ignore tokens that cannot be converted to integers\n",
     "\n",
     "print(\"The number of integers in my output.txt file is:\", count_numbers)\n",
+    "\n",
     "#   Add all integers in the file (sum).\n",
     "total_sum = 0\n",
+    "line_count = 0\n",
     "with open(\"output.txt\", \"r\") as file:\n",
     "    for line in file:\n",
-    "        for char in line:\n",
-    "            if char.isdigit():\n",
-    "                total_sum += int(char)\n",
-    "\n",
+    "        line_count += 1  # Increment line count for each line\n",
+    "        # Skip the first two lines\n",
+    "        if line_count <= 2:\n",
+    "            continue\n",
+    "        \n",
+    "        # Split the line into tokens using non-digit characters as separators\n",
+    "        tokens = ''.join(char if char.isdigit() else ' ' for char in line).split()\n",
+    "        # Iterate over tokens and attempt to convert them to integers\n",
+    "        for token in tokens:\n",
+    "            try:\n",
+    "                total_sum += int(token)\n",
+    "            except ValueError:\n",
+    "                pass  # Ignore tokens that cannot be converted to integers\n",
+    "            \n",
     "print(\"The sum of all integers in my output.txt file is:\", total_sum)\n",
     "#   Modify the content of the file\n",
     "new_line = \"This is the new first line in my output.txt file! \\n\"\n",
@@ -731,11 +757,11 @@
    "metadata": {
     "id": "d54la3il7LNS",
     "ExecuteTime": {
-     "end_time": "2024-03-15T00:50:15.912970Z",
-     "start_time": "2024-03-15T00:50:03.952338Z"
+     "end_time": "2024-03-15T02:16:00.156309Z",
+     "start_time": "2024-03-15T02:15:53.811525Z"
     }
    },
-   "execution_count": 25,
+   "execution_count": 39,
    "outputs": [
     {
      "name": "stdout",
@@ -770,8 +796,8 @@
       "Dictionary to Tuple: (5, 2, 8, 1, 9)\n",
       "Dictionary to Set: {2, 5, 9, 10, 11, 20}\n",
       "The number of lines in my output.txt file is:  26\n",
-      "The number of integers in my output.txt file is: 199\n",
-      "The sum of all integers in my output.txt file is: 594\n"
+      "The number of integers in my output.txt file is: 136\n",
+      "The sum of all integers in my output.txt file is: 3561\n"
      ]
     }
    ]
@@ -850,22 +876,79 @@
   {
    "cell_type": "code",
    "source": [
-    "my_set = {}\n",
+    "# Step 1:\n",
+    "my_set = {0}\n",
+    "line_count = 0\n",
     "with open(\"output.txt\", \"r\") as file:\n",
     "    for line in file:\n",
-    "        for char in line:\n",
-    "            if char.isdigit():\n",
-    "                my_set += int(char)\n",
+    "        line_count += 1\n",
+    "        if line_count <= 2: continue\n",
+    "        # Split the line into tokens using non-digit characters as separators\n",
+    "        tokens = ''.join(char if char.isdigit() else ' ' for char in line).split()\n",
+    "        # Iterate over tokens and attempt to convert them to integers\n",
+    "        for token in tokens:\n",
+    "            try:\n",
+    "                my_set.add(int(token))\n",
+    "            except ValueError:\n",
+    "                pass  # Ignore tokens that cannot be converted to integers\n",
+    "max_value = max(my_set)\n",
+    "print(my_set)\n",
+    "# Step 2:\n",
+    "def is_prime(num):\n",
+    "    if num < 2:\n",
+    "        return False\n",
+    "    for i in range(2, int(num ** 0.5) + 1):\n",
+    "        if num % i == 0:\n",
+    "            return False\n",
+    "    return True\n",
+    "\n",
+    "prime_list = [num for num in range(2, max_value + 1) if is_prime(num)]\n",
+    "\n",
+    "# Step 3:\n",
+    "print(\"List of prime numbers up to\", max_value, \":\", prime_list)\n",
+    "\n",
+    "# Step 4:\n",
+    "prime_sum = sum(prime_list)\n",
+    "\n",
+    "# Step 5:\n",
+    "largest_prime = max(prime_list)\n",
+    "smallest_prime = min(prime_list)\n",
     "\n",
+    "# Step 6:\n",
+    "largest_prime_is_prime = is_prime(max_value)\n",
+    "print(\"Is the largest integer itself prime?\", largest_prime_is_prime)\n",
     "\n",
+    "# Step 7:\n",
+    "with open(\"prime_numbers.txt\", \"w\") as file:\n",
+    "    file.write(\"List of prime numbers: {}\\n\".format(prime_list))\n",
+    "    file.write(\"Sum of prime numbers: {}\\n\".format(prime_sum))\n",
+    "    file.write(\"Largest prime number: {}\\n\".format(largest_prime))\n",
+    "    file.write(\"Smallest prime number: {}\\n\".format(smallest_prime))\n",
     "\n",
-    "print(\"The sum of all integers in my output.txt file is:\", total_sum)"
+    "# Step 8:\n",
+    "if max_value < 2:\n",
+    "    print(\"Error: Largest integer is less than 2, the minimal prime number.\")\n",
+    "\n"
    ],
    "metadata": {
-    "id": "-Lz65OTiM7ds"
+    "id": "-Lz65OTiM7ds",
+    "ExecuteTime": {
+     "end_time": "2024-03-15T02:17:05.382236Z",
+     "start_time": "2024-03-15T02:17:05.374600Z"
+    }
    },
-   "execution_count": null,
-   "outputs": []
+   "execution_count": 40,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{0, 1, 2, 121, 4, 5, 100, 64, 8, 9, 10, 11, 400, 81, 16, 19, 20, 25}\n",
+      "List of prime numbers up to 400 : [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397]\n",
+      "Is the largest integer itself prime? False\n"
+     ]
+    }
+   ]
   },
   {
    "cell_type": "markdown",
Index: LAB2/main.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0,\r\n \"metadata\": {\r\n  \"colab\": {\r\n   \"provenance\": []\r\n  },\r\n  \"kernelspec\": {\r\n   \"name\": \"python3\",\r\n   \"language\": \"python\",\r\n   \"display_name\": \"Python 3 (ipykernel)\"\r\n  },\r\n  \"language_info\": {\r\n   \"name\": \"python\"\r\n  }\r\n },\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Warning:\\n\",\r\n    \"\\n\",\r\n    \"After each exercise from now on, do a git commit and write in a message what you did.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"vWgiVDOhNaoM\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"3.\\n\",\r\n    \"Write a Python program that takes input from the user to create a list of integers and then performs the following operations:\\n\",\r\n    \"\\n\",\r\n    \"  a. Input: Ask the user to enter a series of space-separated integers.\\n\",\r\n    \"\\n\",\r\n    \"  b. Convert Input: Convert the input string into a list of integers.\\n\",\r\n    \"  \\n\",\r\n    \"  c. Sorting: Sort the list in ascending order.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Sorted list: [1, 2, 5, 8, 9]\\n\",\r\n    \"  ```\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"PspxMdWBgq0E\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input:\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"\\n\",\r\n    \"# Sorting:\\n\",\r\n    \"numbers_list = sorted(numbers_list)\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Sorted list:\\\", numbers_list)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"AI_-8VGKh7rA\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-11T12:09:05.698808100Z\",\r\n     \"start_time\": \"2024-03-11T12:09:01.272332100Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 6,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Sorted list: [1, 2, 5, 8, 9]\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"-----------------------------------------------------------------------------\\n\",\r\n    \"\\n\",\r\n    \"Difference between Lists and Tuples:\\n\",\r\n    \"\\n\",\r\n    \"Lists are mutable, meaning their elements can be changed after creation, while tuples are immutable, meaning their elements cannot be changed after creation.\\n\",\r\n    \"Lists are represented by square brackets [ ], whereas tuples are represented by parentheses ( ).\\n\",\r\n    \"Lists have methods like append(), insert(), and remove() to modify the list, while tuples do not support such methods due to their immutability.\\n\",\r\n    \"Lists are typically used when the elements need to be modified or updated frequently, while tuples are used when the data is meant to be constant or unchangeable.\\n\",\r\n    \"\\n\",\r\n    \"-----------------------------------------------------------------------------\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"i3SZ_u9yl9aa\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"4.\\n\",\r\n    \"Extend the previous Python program to include tuples. Now, in addition to creating a list of integers from user input, the program should also create a tuple of those integers and perform the following operations:\\n\",\r\n    \"\\n\",\r\n    \"  a. Input: Ask the user to enter a series of space-separated integers.\\n\",\r\n    \"\\n\",\r\n    \"  b. Convert Input: Convert the input string into a list of integers and a tuple of integers.\\n\",\r\n    \"\\n\",\r\n    \"  c. Sorting: Sort both the list and the tuple in ascending order.\\n\",\r\n    \"\\n\",\r\n    \"  d. Print Output: Print the sorted list and tuple.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"  \\n\",\r\n    \"  Sorted list: [1, 2, 5, 8, 9]\\n\",\r\n    \"  Sorted tuple: (1, 2, 5, 8, 9)\\n\",\r\n    \"  ```\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"s3dGdHFnmHGE\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input:\\n\",\r\n    \"unsorted_numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"unsorted_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Sorting:\\n\",\r\n    \"numbers_list = sorted(unsorted_numbers_list)\\n\",\r\n    \"sorted_tuple = tuple(sorted(unsorted_numbers_list)) # I cannot sort tuples, so I sorted a numbers_list in that case.\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Sorted list:\\\", numbers_list)\\n\",\r\n    \"print(\\\"Sorted tuple:\\\", sorted_tuple)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"5hm5uHjjl-wZ\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-11T12:21:43.827912600Z\",\r\n     \"start_time\": \"2024-03-11T12:21:37.939205800Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 10,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"<class 'tuple'>\\n\",\r\n      \"Sorted list: [1, 2, 5, 8, 9]\\n\",\r\n      \"Sorted tuple: (1, 2, 5, 8, 9)\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \" 5.\\n\",\r\n    \"Extend the previous Python program to demonstrate the manipulation of lists using the append(), insert(), and remove() functions, and to emphasize the immutability of tuples.\\n\",\r\n    \"\\n\",\r\n    \"  a. Input: Ask the user to enter a series of space-separated integers.\\n\",\r\n    \"\\n\",\r\n    \"  b. Convert Input: Convert the input string into a list of integers and a tuple of integers.\\n\",\r\n    \"  \\n\",\r\n    \"  c. Manipulate List: Use the append(), insert(), and remove() functions to modify the list.\\n\",\r\n    \"  \\n\",\r\n    \"  d. Attempt to Modify Tuple: Try to modify the tuple using the same operations as the list.\\n\",\r\n    \"  \\n\",\r\n    \"  e. Print Output: Print the modified list and attempt to print the modified tuple.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Tuples are immutable and cannot be modified.\\n\",\r\n    \"  Modified list: [5, 2, 20, 1, 9, 10]\\n\",\r\n    \"  Tuple remains unchanged: (5, 2, 8, 1, 9)\\n\",\r\n    \"  ```\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"ys8cK-cdqIk7\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"try:\\n\",\r\n    \"    #   Insert 20 at index 2\\n\",\r\n    \"    numbers_tuple.insert(2, 20)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    pass  # Insert operation will also raise an error\\n\",\r\n    \"try:\\n\",\r\n    \"    #   Remove one element  from the tuple\\n\",\r\n    \"    numbers_tuple.remove(1)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    pass  # Remove operation will also raise an error\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Modified list:\\\", numbers_list)\\n\",\r\n    \"print(\\\"Tuple remains unchanged:\\\", numbers_tuple)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"u8ATNzGWqT0H\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-11T12:36:25.080482200Z\",\r\n     \"start_time\": \"2024-03-11T12:36:17.906458400Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 16,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Modified list: [23, 20, 63, 2, 6, 10]\\n\",\r\n      \"Tuple remains unchanged: (1, 23, 63, 2, 6)\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"--------------------------------------------------------------------------------\\n\",\r\n    \"1. **Set**:\\n\",\r\n    \"A set in Python is a collection of unique elements that are unordered. This means that you cannot access elements by indices, and the elements are stored in an unordered manner. The main feature of a set is that each element in the set must be unique. Sets are useful when you want to perform set operations, such as mathematical set operations (e.g., union, difference, intersection).\\n\",\r\n    \"\\n\",\r\n    \"Example of creating a set:\\n\",\r\n    \"```python\\n\",\r\n    \"set = {1, 2, 3, 4, 5}  # Creating a set\\n\",\r\n    \"print(set)  # Displaying the set\\n\",\r\n    \"```\\n\",\r\n    \"\\n\",\r\n    \"2. **Dictionary**:\\n\",\r\n    \"A dictionary in Python is a collection of key-value pairs, where each key is unique. Dictionaries are unique in the sense that they allow us to associate specific values with specific keys, making it easy to retrieve values by referring to their corresponding keys. Dictionaries are very useful when you want to store data in the form of key-value pairs, such as dictionary definitions, test scores, survey results, etc.\\n\",\r\n    \"\\n\",\r\n    \"Example of creating a dictionary:\\n\",\r\n    \"```python\\n\",\r\n    \"dictionary = {\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\", \\\"key3\\\": \\\"value3\\\"}  # Creating a dictionary\\n\",\r\n    \"print(dictionary)  # Displaying the dictionary\\n\",\r\n    \"```\\n\",\r\n    \"It's important to remember that both in sets and dictionaries, keys (in the case of dictionaries) and elements (in the case of sets) must be hashable, meaning they must be immutable (e.g., numbers, strings, tuples), and they must have a defined hashing method.\\n\",\r\n    \"\\n\",\r\n    \"--------------------------------------------------------------------------------\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"IMGqb8VoxwOv\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"6.\\n\",\r\n    \"Additionally, introduce sets and dictionaries and perform basic operations on them.\\n\",\r\n    \"\\n\",\r\n    \"  a. ...\\n\",\r\n    \"\\n\",\r\n    \"  b. ...\\n\",\r\n    \"\\n\",\r\n    \"  c. ...\\n\",\r\n    \"\\n\",\r\n    \"  d. ...\\n\",\r\n    \"\\n\",\r\n    \"  e. Set Operations: Perform union, intersection, and difference operations on the set.\\n\",\r\n    \"\\n\",\r\n    \"  f. Dictionary Operations: Print the dictionary, add a new key-value pair, and delete an existing key-value pair.\\n\",\r\n    \"\\n\",\r\n    \"  g. Print Output: Print the modified list, unchanged tuple, set operations results, and updated dictionary.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Tuples are immutable and cannot be modified.\\n\",\r\n    \"  Original Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n    \"  Modified list: [5, 2, 20, 1, 9, 10]\\n\",\r\n    \"  Tuple remains unchanged: (5, 2, 8, 1, 9)\\n\",\r\n    \"  Union of set: {1, 2, 5, 9, 10, 11, 12}\\n\",\r\n    \"  Intersection of set: {8, 5}\\n\",\r\n    \"  Difference of set: {9}\\n\",\r\n    \"  Updated Dictionary: {5: 25, 2: 4, 1: 1, 9: 81, 11: 121}\\n\",\r\n    \"\\n\",\r\n    \"  ```\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"PD4Fhykxx1w6\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Set Operations\\n\",\r\n    \"set_num = {1, 2, 4, 20}\\n\",\r\n    \"# Union\\n\",\r\n    \"set_union = set_num.union({1, 4, 19, 20})\\n\",\r\n    \"# Intersection\\n\",\r\n    \"set_intersection = set_num.intersection({1, 4, 19, 20})\\n\",\r\n    \"# Difference\\n\",\r\n    \"set_difference = set_num - set_intersection\\n\",\r\n    \"\\n\",\r\n    \"# Dictionary Operations\\n\",\r\n    \"numbers_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"print(\\\"Original Dictionary:\\\", numbers_dict)\\n\",\r\n    \"# Add a new key-value pair\\n\",\r\n    \"numbers_dict[11] = 121\\n\",\r\n    \"# Delete an existing key-value pair\\n\",\r\n    \"numbers_dict.pop(8)\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"Modified list:\\\", numbers_list)\\n\",\r\n    \"print(\\\"Tuple remains unchanged:\\\", numbers_tuple)\\n\",\r\n    \"print(\\\"Union of set:\\\", set_union)\\n\",\r\n    \"print(\\\"Intersection of set:\\\", set_intersection)\\n\",\r\n    \"print(\\\"Difference of set:\\\", set_difference)\\n\",\r\n    \"print(\\\"Updated Dictionary:\\\", numbers_dict)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"AwRmtngJzAZI\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-14T23:28:02.528022Z\",\r\n     \"start_time\": \"2024-03-14T23:27:58.838192Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Modified list: [5, 2, 20, 8, 9, 10]\\n\",\r\n      \"Tuple remains unchanged: (5, 2, 1, 8, 9)\\n\",\r\n      \"Union of set: {1, 2, 4, 19, 20}\\n\",\r\n      \"Intersection of set: {1, 4, 20}\\n\",\r\n      \"Difference of set: {2}\\n\",\r\n      \"Updated Dictionary: {5: 25, 2: 4, 20: 400, 9: 81, 10: 100, 11: 121}\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"7. **Built-in Types and Type Conversion**\\n\",\r\n    \"\\n\",\r\n    \"  Extend the previous Python program to demonstrate the use of built-in types and type conversion. Perform the following operations:\\n\",\r\n    \"\\n\",\r\n    \"  a. ...\\n\",\r\n    \"\\n\",\r\n    \"  b. ...\\n\",\r\n    \"\\n\",\r\n    \"  c. ...\\n\",\r\n    \"\\n\",\r\n    \"  d. ...\\n\",\r\n    \"\\n\",\r\n    \"  e. ...\\n\",\r\n    \"\\n\",\r\n    \"  f. ...\\n\",\r\n    \"\\n\",\r\n    \"  g. Type Conversion: Convert the list to a tuple, set, and dictionary. Convert the tuple to a list, set, and dictionary. Convert the set to a list, tuple, and dictionary. Convert the dictionary to a list, tuple, and set.\\n\",\r\n    \"\\n\",\r\n    \"  h. Print Output: Print the results of the type conversion operations.\\n\",\r\n    \"\\n\",\r\n    \"  example:\\n\",\r\n    \"  ```\\n\",\r\n    \"  Enter a series of space-separated integers: 5 2 8 1 9\\n\",\r\n    \"\\n\",\r\n    \"  Tuples are immutable and cannot be modified.\\n\",\r\n    \"  Original Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n    \"  List to Tuple: (5, 2, 20, 1, 9, 10)\\n\",\r\n    \"  List to Set: {1, 2, 5, 9, 10, 20}\\n\",\r\n    \"  List to Dictionary: {5: 25, 2: 4, 20: 400, 1: 1, 9: 81, 10: 100}\\n\",\r\n    \"  Tuple to List: [5, 2, 8, 1, 9]\\n\",\r\n    \"  Tuple to Set: {1, 2, 5, 8, 9}\\n\",\r\n    \"  Tuple to Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n    \"  Set to List: [1, 2, 5, 9, 10, 20]\\n\",\r\n    \"  Set to Tuple: (1, 2, 5, 9, 10, 20)\\n\",\r\n    \"  Set to Dictionary: {1: 1, 2: 4, 5: 25, 9: 81, 10: 100, 20: 400}\\n\",\r\n    \"  Dictionary to List: [5, 2, 20, 1, 9, 10, 11]\\n\",\r\n    \"  Dictionary to Tuple: (5, 2, 20, 1, 9, 10, 11)\\n\",\r\n    \"  Dictionary to Set: {1, 2, 5, 9, 10, 11, 20}\\n\",\r\n    \"```\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"N0xlv8oD2aXa\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Set Operations\\n\",\r\n    \"set_num = {1, 2, 4, 20}\\n\",\r\n    \"# Union\\n\",\r\n    \"set_union = set_num.union({1, 4, 19, 20})\\n\",\r\n    \"# Intersection\\n\",\r\n    \"set_intersection = set_num.intersection({1, 4, 19, 20})\\n\",\r\n    \"# Difference\\n\",\r\n    \"set_difference = set_num - set_intersection\\n\",\r\n    \"\\n\",\r\n    \"# Dictionary Operations\\n\",\r\n    \"numbers_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"print(\\\"Original Dictionary:\\\", numbers_dict)\\n\",\r\n    \"# Add a new key-value pair\\n\",\r\n    \"numbers_dict[11] = 121\\n\",\r\n    \"# Delete an existing key-value pair\\n\",\r\n    \"numbers_dict.pop(8)\\n\",\r\n    \"\\n\",\r\n    \"# Type Conversion\\n\",\r\n    \"# list_to_tuple =\\n\",\r\n    \"list_to_tuple = tuple(numbers_list)\\n\",\r\n    \"# list_to_set =\\n\",\r\n    \"list_to_set = {x for x in numbers_list}\\n\",\r\n    \"# list_to_dict =\\n\",\r\n    \"list_to_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"# tuple_to_list =\\n\",\r\n    \"tuple_to_list = list(numbers_tuple)\\n\",\r\n    \"# tuple_to_set =\\n\",\r\n    \"tuple_to_set = {x for x in numbers_tuple}\\n\",\r\n    \"# tuple_to_dict =\\n\",\r\n    \"tuple_to_dict = {number: number ** 2 for number in numbers_tuple}\\n\",\r\n    \"# set_to_list =\\n\",\r\n    \"set_to_list = list(set_num)\\n\",\r\n    \"# set_to_tuple =\\n\",\r\n    \"set_to_tuple = tuple(set_num)\\n\",\r\n    \"# set_to_dict =\\n\",\r\n    \"set_to_dict = {number: number ** 2 for number in set_num}\\n\",\r\n    \"# dict_to_list =\\n\",\r\n    \"dict_to_list = list(numbers_dict)\\n\",\r\n    \"# dict_to_tuple =\\n\",\r\n    \"dict_to_tuple = tuple(numbers_tuple)\\n\",\r\n    \"# dict_to_set =\\n\",\r\n    \"dict_to_set = {x for x in numbers_dict}\\n\",\r\n    \"\\n\",\r\n    \"# Print Output\\n\",\r\n    \"print(\\\"List to Tuple:\\\", list_to_tuple)\\n\",\r\n    \"print(\\\"List to Set:\\\", list_to_set)\\n\",\r\n    \"print(\\\"List to Dictionary:\\\", list_to_dict)\\n\",\r\n    \"print(\\\"Tuple to List:\\\", tuple_to_list)\\n\",\r\n    \"print(\\\"Tuple to Set:\\\", tuple_to_set)\\n\",\r\n    \"print(\\\"Tuple to Dictionary:\\\", tuple_to_dict)\\n\",\r\n    \"print(\\\"Set to List:\\\", set_to_list)\\n\",\r\n    \"print(\\\"Set to Tuple:\\\", set_to_tuple)\\n\",\r\n    \"print(\\\"Set to Dictionary:\\\", set_to_dict)\\n\",\r\n    \"print(\\\"Dictionary to List:\\\", dict_to_list)\\n\",\r\n    \"print(\\\"Dictionary to Tuple:\\\", dict_to_tuple)\\n\",\r\n    \"print(\\\"Dictionary to Set:\\\", dict_to_set)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"-NzD4x_n31Rv\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-14T23:51:21.268005Z\",\r\n     \"start_time\": \"2024-03-14T23:51:18.032861Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 16,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"List to Tuple: (5, 2, 20, 8, 9, 10)\\n\",\r\n      \"List to Set: {2, 5, 8, 9, 10, 20}\\n\",\r\n      \"List to Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Tuple to List: [5, 2, 8, 1, 9]\\n\",\r\n      \"Tuple to Set: {1, 2, 5, 8, 9}\\n\",\r\n      \"Tuple to Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n      \"Set to List: [1, 2, 4, 20]\\n\",\r\n      \"Set to Tuple: (1, 2, 4, 20)\\n\",\r\n      \"Set to Dictionary: {1: 1, 2: 4, 4: 16, 20: 400}\\n\",\r\n      \"Dictionary to List: [5, 2, 20, 9, 10, 11]\\n\",\r\n      \"Dictionary to Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Dictionary to Set: {2, 5, 9, 10, 11, 20}\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"8.\\n\",\r\n    \"Extend the previous Python program to write the output to a file and perform operations on that file.\\n\",\r\n    \"\\n\",\r\n    \"  a. ...\\n\",\r\n    \"\\n\",\r\n    \"  b. ...\\n\",\r\n    \"\\n\",\r\n    \"  c. ...\\n\",\r\n    \"\\n\",\r\n    \"  d. ...\\n\",\r\n    \"\\n\",\r\n    \"  e. ...\\n\",\r\n    \"\\n\",\r\n    \"  f. ...\\n\",\r\n    \"\\n\",\r\n    \"  g. ...\\n\",\r\n    \"\\n\",\r\n    \"  h. Write Output to File: Write all the results (original inputs, modified data structures, type conversion results) to a file.\\n\",\r\n    \"\\n\",\r\n    \"  i. Perform Operations on File: Open the file, read its content, and perform some operations like counting the number of lines, finding specific data, etc.\\n\",\r\n    \"\\n\",\r\n    \"  j. Modify File Content: Modify the content of the file by, for example, changing specific lines or adding new lines.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"KVn_MxPh6gNz\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Input\\n\",\r\n    \"input_numbers = input(\\\"Enter a series of space-separated integers: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Convert Input\\n\",\r\n    \"numbers_list = [int(num) for num in input_numbers.split()]\\n\",\r\n    \"numbers_tuple = tuple(int(num) for num in input_numbers.split())\\n\",\r\n    \"\\n\",\r\n    \"# Manipulate List\\n\",\r\n    \"#   Append 10 to the list\\n\",\r\n    \"numbers_list.append(10)\\n\",\r\n    \"#   Insert 20 at index 2\\n\",\r\n    \"numbers_list.insert(2, 20)\\n\",\r\n    \"#   Remove one element from the list\\n\",\r\n    \"numbers_list.remove(1)\\n\",\r\n    \"\\n\",\r\n    \"# Attempt to Modify Tuple (this will raise an error)\\n\",\r\n    \"try:\\n\",\r\n    \"#   Append 10 to the tuple\\n\",\r\n    \"    numbers_tuple.append(10)\\n\",\r\n    \"except AttributeError:\\n\",\r\n    \"    print(\\\"Tuples are immutable and cannot be modified.\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Set Operations\\n\",\r\n    \"numbers_set = {1, 2, 4, 20}\\n\",\r\n    \"# Union\\n\",\r\n    \"set_union = numbers_set.union({1, 4, 19, 20})\\n\",\r\n    \"# Intersection\\n\",\r\n    \"set_intersection = numbers_set.intersection({1, 4, 19, 20})\\n\",\r\n    \"# Difference\\n\",\r\n    \"set_difference = numbers_set - set_intersection\\n\",\r\n    \"\\n\",\r\n    \"# Dictionary Operations\\n\",\r\n    \"numbers_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"print(\\\"Original Dictionary:\\\", numbers_dict)\\n\",\r\n    \"# Add a new key-value pair\\n\",\r\n    \"numbers_dict[11] = 121\\n\",\r\n    \"# Delete an existing key-value pair\\n\",\r\n    \"numbers_dict.pop(8)\\n\",\r\n    \"\\n\",\r\n    \"# Type Conversion\\n\",\r\n    \"# list_to_tuple =\\n\",\r\n    \"list_to_tuple = tuple(numbers_list)\\n\",\r\n    \"# list_to_set =\\n\",\r\n    \"list_to_set = {x for x in numbers_list}\\n\",\r\n    \"# list_to_dict =\\n\",\r\n    \"list_to_dict = {number: number ** 2 for number in numbers_list}\\n\",\r\n    \"# tuple_to_list =\\n\",\r\n    \"tuple_to_list = list(numbers_tuple)\\n\",\r\n    \"# tuple_to_set =\\n\",\r\n    \"tuple_to_set = {x for x in numbers_tuple}\\n\",\r\n    \"# tuple_to_dict =\\n\",\r\n    \"tuple_to_dict = {number: number ** 2 for number in numbers_tuple}\\n\",\r\n    \"# set_to_list =\\n\",\r\n    \"set_to_list = list(numbers_set)\\n\",\r\n    \"# set_to_tuple =\\n\",\r\n    \"set_to_tuple = tuple(numbers_set)\\n\",\r\n    \"# set_to_dict =\\n\",\r\n    \"set_to_dict = {number: number ** 2 for number in numbers_set}\\n\",\r\n    \"# dict_to_list =\\n\",\r\n    \"dict_to_list = list(numbers_dict)\\n\",\r\n    \"# dict_to_tuple =\\n\",\r\n    \"dict_to_tuple = tuple(numbers_tuple)\\n\",\r\n    \"# dict_to_set =\\n\",\r\n    \"dict_to_set = {x for x in numbers_dict}\\n\",\r\n    \"\\n\",\r\n    \"student_number = input(\\\"Enter your student number: \\\")\\n\",\r\n    \"\\n\",\r\n    \"# Write Output to File like this:\\n\",\r\n    \"output_file = open(\\\"output.txt\\\", \\\"w\\\")\\n\",\r\n    \"data = [\\\"Student Number: \\\" + student_number,\\n\",\r\n    \"     \\n\",\r\n    \"    \\\"\\\\n\\\\nOriginal List: \\\" + str(numbers_list),\\n\",\r\n    \"    \\\"\\\\nOriginal Tuple: \\\" + str(numbers_tuple),\\n\",\r\n    \"    \\\"\\\\nOriginal Set: \\\" + str(numbers_set),\\n\",\r\n    \"    \\\"\\\\nOriginal Dictionary: \\\" + str(numbers_dict),\\n\",\r\n    \"\\n\",\r\n    \"    \\\"\\\\n\\\\nManipulated List: \\\" + str(numbers_list),\\n\",\r\n    \"    \\\"\\\\nManipulated Tuple: \\\" + str(numbers_tuple),\\n\",\r\n    \"    \\\"\\\\nUnion of Set: \\\" + str(set_union),\\n\",\r\n    \"    \\\"\\\\nIntersection of Set: \\\" + str(set_intersection),\\n\",\r\n    \"    \\\"\\\\nDifference of Set: \\\" + str(set_difference),\\n\",\r\n    \"    \\\"\\\\nUpdated Dictionary: \\\" + str(numbers_dict),\\n\",\r\n    \"\\n\",\r\n    \"    \\\"\\\\n\\\\nList to Tuple: \\\" + str(list_to_tuple),\\n\",\r\n    \"    \\\"\\\\nList to Set: \\\" + str(list_to_set),\\n\",\r\n    \"    \\\"\\\\nList to Dictionary: \\\" + str(list_to_dict),\\n\",\r\n    \"    \\\"\\\\nTuple to List: \\\" + str(tuple_to_list),\\n\",\r\n    \"    \\\"\\\\nTuple to Set: \\\" + str(tuple_to_set),\\n\",\r\n    \"    \\\"\\\\nTuple to Dictionary: \\\" + str(tuple_to_dict),\\n\",\r\n    \"    \\\"\\\\nSet to List: \\\" + str(set_to_list),\\n\",\r\n    \"    \\\"\\\\nSet to Tuple: \\\" + str(set_to_tuple),\\n\",\r\n    \"    \\\"\\\\nSet to Dictionary: \\\" + str(set_to_dict),\\n\",\r\n    \"    \\\"\\\\nDictionary to List: \\\" + str(dict_to_list),\\n\",\r\n    \"    \\\"\\\\nDictionary to Tuple: \\\" + str(dict_to_tuple),\\n\",\r\n    \"    \\\"\\\\nDictionary to Set: \\\" + str(dict_to_set)]\\n\",\r\n    \"\\n\",\r\n    \"output_file.writelines(data)\\n\",\r\n    \"output_file.close()\\n\",\r\n    \"\\n\",\r\n    \"# print \\\"Content of the file:\\\"\\n\",\r\n    \"output_file = open(\\\"output.txt\\\", \\\"r\\\")\\n\",\r\n    \"print(output_file.read())\\n\",\r\n    \"\\n\",\r\n    \"# Perform Operations on File:\\n\",\r\n    \"#   Count the number of lines in the file\\n\",\r\n    \"#Count the number of lines in python\\n\",\r\n    \"with open(\\\"output.txt\\\",\\\"r\\\") as file:\\n\",\r\n    \"   count = 0\\n\",\r\n    \"   for line in file: \\n\",\r\n    \"      count += 1\\n\",\r\n    \"print(\\\"The number of lines in my output.txt file is: \\\", count)\\n\",\r\n    \"\\n\",\r\n    \"#   Count the number of integers in the file\\n\",\r\n    \"count_numbers = 0\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    for line in file:\\n\",\r\n    \"        for char in line:\\n\",\r\n    \"            if char.isdigit(): count_numbers += 1\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"The number of integers in my output.txt file is:\\\", count_numbers)\\n\",\r\n    \"#   Add all integers in the file (sum).\\n\",\r\n    \"total_sum = 0\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    for line in file:\\n\",\r\n    \"        for char in line:\\n\",\r\n    \"            if char.isdigit():\\n\",\r\n    \"                total_sum += int(char)\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"The sum of all integers in my output.txt file is:\\\", total_sum)\\n\",\r\n    \"#   Modify the content of the file\\n\",\r\n    \"new_line = \\\"This is the new first line in my output.txt file! \\\\n\\\"\\n\",\r\n    \"\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    file_content = file.read()\\n\",\r\n    \"updated_content = new_line + file_content\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"w\\\") as file:\\n\",\r\n    \"    file.write(updated_content)\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"d54la3il7LNS\",\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-03-15T00:50:15.912970Z\",\r\n     \"start_time\": \"2024-03-15T00:50:03.952338Z\"\r\n    }\r\n   },\r\n   \"execution_count\": 25,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Tuples are immutable and cannot be modified.\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Student Number: s26904\\n\",\r\n      \"\\n\",\r\n      \"Original List: [5, 2, 20, 8, 9, 10]\\n\",\r\n      \"Original Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Original Set: {1, 2, 4, 20}\\n\",\r\n      \"Original Dictionary: {5: 25, 2: 4, 20: 400, 9: 81, 10: 100, 11: 121}\\n\",\r\n      \"\\n\",\r\n      \"Manipulated List: [5, 2, 20, 8, 9, 10]\\n\",\r\n      \"Manipulated Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Union of Set: {1, 2, 4, 19, 20}\\n\",\r\n      \"Intersection of Set: {1, 4, 20}\\n\",\r\n      \"Difference of Set: {2}\\n\",\r\n      \"Updated Dictionary: {5: 25, 2: 4, 20: 400, 9: 81, 10: 100, 11: 121}\\n\",\r\n      \"\\n\",\r\n      \"List to Tuple: (5, 2, 20, 8, 9, 10)\\n\",\r\n      \"List to Set: {2, 5, 8, 9, 10, 20}\\n\",\r\n      \"List to Dictionary: {5: 25, 2: 4, 20: 400, 8: 64, 9: 81, 10: 100}\\n\",\r\n      \"Tuple to List: [5, 2, 8, 1, 9]\\n\",\r\n      \"Tuple to Set: {1, 2, 5, 8, 9}\\n\",\r\n      \"Tuple to Dictionary: {5: 25, 2: 4, 8: 64, 1: 1, 9: 81}\\n\",\r\n      \"Set to List: [1, 2, 4, 20]\\n\",\r\n      \"Set to Tuple: (1, 2, 4, 20)\\n\",\r\n      \"Set to Dictionary: {1: 1, 2: 4, 4: 16, 20: 400}\\n\",\r\n      \"Dictionary to List: [5, 2, 20, 9, 10, 11]\\n\",\r\n      \"Dictionary to Tuple: (5, 2, 8, 1, 9)\\n\",\r\n      \"Dictionary to Set: {2, 5, 9, 10, 11, 20}\\n\",\r\n      \"The number of lines in my output.txt file is:  26\\n\",\r\n      \"The number of integers in my output.txt file is: 199\\n\",\r\n      \"The sum of all integers in my output.txt file is: 594\\n\"\r\n     ]\r\n    }\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"--------------------------------------------------------------------------------\\n\",\r\n    \"**Control Statements:**\\n\",\r\n    \"Control statements are used in programming to alter the flow of execution based on certain conditions or criteria. In Python, commonly used control statements include:\\n\",\r\n    \"\\n\",\r\n    \"`if, elif, else:` These statements are used for conditional execution. They allow the program to execute different blocks of code based on specified conditions.\\n\",\r\n    \"\\n\",\r\n    \"`for loop:` Used for iterating over a sequence (such as lists, tuples, strings, etc.) or any iterable object. It allows you to execute a block of code repeatedly for each item in the sequence.\\n\",\r\n    \"\\n\",\r\n    \"`while loop:` Used for executing a block of code repeatedly as long as a specified condition is true. It keeps iterating until the condition becomes false.\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"**Loops:**\\n\",\r\n    \"Loops are used for executing a block of code repeatedly. In Python, there are two main types of loops:\\n\",\r\n    \"\\n\",\r\n    \"`for loop: `As mentioned earlier, the for loop iterates over a sequence or any iterable object.\\n\",\r\n    \"\\n\",\r\n    \"`while loop:` This loop executes a block of code as long as a specified condition is true. It continues iterating until the condition becomes false.\\n\",\r\n    \"\\n\",\r\n    \"**Other Statements:**\\n\",\r\n    \"This category typically includes other types of statements that don't fall directly under control statements or loops. It can include various types of statements used for different purposes in Python programming, such as:\\n\",\r\n    \"\\n\",\r\n    \"`Assignment statements:` Assigning values to variables.\\n\",\r\n    \"\\n\",\r\n    \"`Function calls:` Invoking functions to perform specific tasks.\\n\",\r\n    \"\\n\",\r\n    \"`Import statements:` Importing modules or packages to use their functionality in the current script or program.\\n\",\r\n    \"\\n\",\r\n    \"`Exception handling statements: `Statements used for handling exceptions (errors) that may occur during the execution of a program, such as try, except, finally, etc.\\n\",\r\n    \"\\n\",\r\n    \"`With statements: `Used for resource management, especially for working with files, to ensure that certain resources are properly closed or released after use.\\n\",\r\n    \"\\n\",\r\n    \"These are fundamental constructs in Python programming that enable you to control the flow of your program, repeat tasks efficiently, and execute various types of statements to achieve desired functionality.\\n\",\r\n    \"\\n\",\r\n    \"-------------------------------------------------------------------------------\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"kDx3mxAgD2L7\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"9.  Utilizing the Largest Integer from output.txt\\n\",\r\n    \"\\n\",\r\n    \"  Task Description:\\n\",\r\n    \"\\n\",\r\n    \"  Transform the previous task to utilize the largest integer from the output file 'output.txt' instead of asking the user for it.\\n\",\r\n    \"\\n\",\r\n    \"  1. Read the largest integer from the 'output.txt' file.\\n\",\r\n    \"  2. Generate a list of all prime numbers up to the largest integer.\\n\",\r\n    \"  3. Print the list of prime numbers.\\n\",\r\n    \"  4. Calculate the sum of all prime numbers in the list.\\n\",\r\n    \"  5. Determine the largest and smallest prime numbers in the list.\\n\",\r\n    \"  6. Check if the largest integer itself is prime and print the result.\\n\",\r\n    \"  7. Write the list of prime numbers along with the sum, largest, and smallest prime numbers to a file 'prime_numbers.txt'.\\n\",\r\n    \"  8. Handle the scenario where the largest integer cannot be found in the file.\\n\",\r\n    \"\\n\",\r\n    \"  Example:\\n\",\r\n    \"\\n\",\r\n    \"  If the 'output.txt' file contains:\\n\",\r\n    \"  Largest prime number: 20\\n\",\r\n    \"\\n\",\r\n    \"  The program will generate the list of prime numbers up to 20, perform calculations, and write the results to 'prime_numbers.txt'.\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"pWC3IYevHysh\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"my_set = {}\\n\",\r\n    \"with open(\\\"output.txt\\\", \\\"r\\\") as file:\\n\",\r\n    \"    for line in file:\\n\",\r\n    \"        for char in line:\\n\",\r\n    \"            if char.isdigit():\\n\",\r\n    \"                my_set += int(char)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"The sum of all integers in my output.txt file is:\\\", total_sum)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"-Lz65OTiM7ds\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"10.\\n\",\r\n    \"In the final main.ipynb file, leave the results from task 8 and 9, commit and push\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"V5bxEjZFNCAA\"\r\n   }\r\n  }\r\n ]\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LAB2/main.ipynb b/LAB2/main.ipynb
--- a/LAB2/main.ipynb	
+++ b/LAB2/main.ipynb	
@@ -701,22 +701,48 @@
     "      count += 1\n",
     "print(\"The number of lines in my output.txt file is: \", count)\n",
     "\n",
-    "#   Count the number of integers in the file\n",
+    "# Count the number of integers in the file\n",
     "count_numbers = 0\n",
+    "line_count = 0\n",
     "with open(\"output.txt\", \"r\") as file:\n",
     "    for line in file:\n",
-    "        for char in line:\n",
-    "            if char.isdigit(): count_numbers += 1\n",
+    "        line_count += 1  # Increment line count for each line\n",
+    "        \n",
+    "        # Skip the first two lines\n",
+    "        if line_count <= 2:\n",
+    "            continue\n",
+    "        \n",
+    "        # Split the line into tokens using non-digit characters as separators\n",
+    "        tokens = ''.join(char if char.isdigit() else ' ' for char in line).split()\n",
+    "        # Iterate over tokens and attempt to convert them to integers\n",
+    "        for token in tokens:\n",
+    "            try:\n",
+    "                int(token)  # Attempt to convert the token to an integer\n",
+    "                count_numbers += 1\n",
+    "            except ValueError:\n",
+    "                pass  # Ignore tokens that cannot be converted to integers\n",
     "\n",
     "print(\"The number of integers in my output.txt file is:\", count_numbers)\n",
+    "\n",
     "#   Add all integers in the file (sum).\n",
     "total_sum = 0\n",
+    "line_count = 0\n",
     "with open(\"output.txt\", \"r\") as file:\n",
     "    for line in file:\n",
-    "        for char in line:\n",
-    "            if char.isdigit():\n",
-    "                total_sum += int(char)\n",
-    "\n",
+    "        line_count += 1  # Increment line count for each line\n",
+    "        # Skip the first two lines\n",
+    "        if line_count <= 2:\n",
+    "            continue\n",
+    "        \n",
+    "        # Split the line into tokens using non-digit characters as separators\n",
+    "        tokens = ''.join(char if char.isdigit() else ' ' for char in line).split()\n",
+    "        # Iterate over tokens and attempt to convert them to integers\n",
+    "        for token in tokens:\n",
+    "            try:\n",
+    "                total_sum += int(token)\n",
+    "            except ValueError:\n",
+    "                pass  # Ignore tokens that cannot be converted to integers\n",
+    "            \n",
     "print(\"The sum of all integers in my output.txt file is:\", total_sum)\n",
     "#   Modify the content of the file\n",
     "new_line = \"This is the new first line in my output.txt file! \\n\"\n",
@@ -731,11 +757,11 @@
    "metadata": {
     "id": "d54la3il7LNS",
     "ExecuteTime": {
-     "end_time": "2024-03-15T00:50:15.912970Z",
-     "start_time": "2024-03-15T00:50:03.952338Z"
+     "end_time": "2024-03-15T02:16:00.156309Z",
+     "start_time": "2024-03-15T02:15:53.811525Z"
     }
    },
-   "execution_count": 25,
+   "execution_count": 39,
    "outputs": [
     {
      "name": "stdout",
@@ -770,8 +796,8 @@
       "Dictionary to Tuple: (5, 2, 8, 1, 9)\n",
       "Dictionary to Set: {2, 5, 9, 10, 11, 20}\n",
       "The number of lines in my output.txt file is:  26\n",
-      "The number of integers in my output.txt file is: 199\n",
-      "The sum of all integers in my output.txt file is: 594\n"
+      "The number of integers in my output.txt file is: 136\n",
+      "The sum of all integers in my output.txt file is: 3561\n"
      ]
     }
    ]
@@ -850,22 +876,79 @@
   {
    "cell_type": "code",
    "source": [
-    "my_set = {}\n",
+    "# Step 1:\n",
+    "my_set = {0}\n",
+    "line_count = 0\n",
     "with open(\"output.txt\", \"r\") as file:\n",
     "    for line in file:\n",
-    "        for char in line:\n",
-    "            if char.isdigit():\n",
-    "                my_set += int(char)\n",
+    "        line_count += 1\n",
+    "        if line_count <= 2: continue\n",
+    "        # Split the line into tokens using non-digit characters as separators\n",
+    "        tokens = ''.join(char if char.isdigit() else ' ' for char in line).split()\n",
+    "        # Iterate over tokens and attempt to convert them to integers\n",
+    "        for token in tokens:\n",
+    "            try:\n",
+    "                my_set.add(int(token))\n",
+    "            except ValueError:\n",
+    "                pass  # Ignore tokens that cannot be converted to integers\n",
+    "max_value = max(my_set)\n",
+    "print(my_set)\n",
+    "# Step 2:\n",
+    "def is_prime(num):\n",
+    "    if num < 2:\n",
+    "        return False\n",
+    "    for i in range(2, int(num ** 0.5) + 1):\n",
+    "        if num % i == 0:\n",
+    "            return False\n",
+    "    return True\n",
+    "\n",
+    "prime_list = [num for num in range(2, max_value + 1) if is_prime(num)]\n",
+    "\n",
+    "# Step 3:\n",
+    "print(\"List of prime numbers up to\", max_value, \":\", prime_list)\n",
+    "\n",
+    "# Step 4:\n",
+    "prime_sum = sum(prime_list)\n",
+    "\n",
+    "# Step 5:\n",
+    "largest_prime = max(prime_list)\n",
+    "smallest_prime = min(prime_list)\n",
     "\n",
+    "# Step 6:\n",
+    "largest_prime_is_prime = is_prime(max_value)\n",
+    "print(\"Is the largest integer itself prime?\", largest_prime_is_prime)\n",
     "\n",
+    "# Step 7:\n",
+    "with open(\"prime_numbers.txt\", \"w\") as file:\n",
+    "    file.write(\"List of prime numbers: {}\\n\".format(prime_list))\n",
+    "    file.write(\"Sum of prime numbers: {}\\n\".format(prime_sum))\n",
+    "    file.write(\"Largest prime number: {}\\n\".format(largest_prime))\n",
+    "    file.write(\"Smallest prime number: {}\\n\".format(smallest_prime))\n",
     "\n",
-    "print(\"The sum of all integers in my output.txt file is:\", total_sum)"
+    "# Step 8:\n",
+    "if max_value < 2:\n",
+    "    print(\"Error: Largest integer is less than 2, the minimal prime number.\")\n",
+    "\n"
    ],
    "metadata": {
-    "id": "-Lz65OTiM7ds"
+    "id": "-Lz65OTiM7ds",
+    "ExecuteTime": {
+     "end_time": "2024-03-15T02:17:05.382236Z",
+     "start_time": "2024-03-15T02:17:05.374600Z"
+    }
    },
-   "execution_count": null,
-   "outputs": []
+   "execution_count": 40,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{0, 1, 2, 121, 4, 5, 100, 64, 8, 9, 10, 11, 400, 81, 16, 19, 20, 25}\n",
+      "List of prime numbers up to 400 : [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397]\n",
+      "Is the largest integer itself prime? False\n"
+     ]
+    }
+   ]
   },
   {
    "cell_type": "markdown",
